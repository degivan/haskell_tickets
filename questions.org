* Вопросы по темам 
** [5/5]Question 1: Intro
*** DONE Перечислите основные парадигмы ФП и Haskell, отличительные особенности
*** DONE Укажите преимущества чистоты
*** DONE Укажите преимущества ленивых вычислений
*** DONE Укажите преимущества иммутабельности
*** DONE Укажите преимущества статической типизации
** [16/19]Question 2: Basic Syntax
*** TODO Имеется класс типов: ~class C a where maxInt :: Int~. Реализуйте данный класс типов для какого-нибудь типа данных.
*** DONE Имеется класс типов: ~class C a where intGetter :: a -> Int~. Реализуйте данный класс типов для какого-нибудь типа данных.
*** DONE Как обновить ~f~ в ~data A = A { f :: Int -> Int };~?
*** DONE Что дает слово "*deriving*"? Что это в языке Haskell?  
*** DONE Напишите реализацию ~foldr~ и ~foldl~. И нарисуйте картинку вычисления
*** DONE Синтаксическим сахаром для какого кода является объявление следующего типа данных: ~data MyData = A { f :: Int, g :: Int -> Double }~
*** DONE Напишите тип выражения ~flip id~.
*** DONE Напишите тип выражения ~((+) . )~
*** DONE Напишите тип выражения ~(.) . (.)~
*** DONE Имеется тип данных ~data A a = B { f :: Double }~. Укажите тип ~f~.    
*** TODO В чем отличие ~data~ от ~newtype~?
*** TODO В чем отличие ~newtype~ от ~type~? Приведите пример.
*** DONE Что такое "*Currying* (каррирование)" и *функции высшего порядка*?
*** DONE Напишите, что такое DatatypeContexts? Приведите пример (не из презентации)
*** DONE Напишите тип следующей функции в наиболее общем виде: ~f a = map (* a) . map (uncurry (+)) . map (\x -> (x, x))~
*** DONE Когда стоит описывать функцию, зависящую от ~typeclass~'а, внутри, а когда снаружи?
*** DONE Как писать функции и операторы в префиксной и инфиксной нотации?
*** DONE Приведите пример типа с kind'ом ~(* -> Constraint) -> Constraint~
*** DONE Приведите пример типа с kind'ом ~(* -> *) -> Constraint~
*** DONE Приведите пример типа с kind'ом ~(* -> Constraint) -> *~
*** DONE Приведите пример типа с kind'ом ~* -> Constraint~
*** DONE Приведите пример типа с kind’ом ~(*->*)->*->*~
*** DONE Приведите пример типа с kind’ом ~(* -> *) -> *~
*** DONE Укажите kind для ~Monad~
*** DONE Укажите kind следующего типа данных: ~data A f g = B (f g) (g f)~
*** DONE Укажите kind следующего типа данных: ~data A f g = B (f g Int)~
*** DONE Укажите kind типа ~type C p = p Int => Int~
*** DONE Укажите kind типа ~type C p = (p Int, p Double)~
*** DONE Укажите kind типа ~type D a = (a Int, Num Int)~
** [16/18]Question 4: Type hierarchy
*** DONE Чему равно значение ~length (Left "hello")~ и почему?
*** DONE Чему равно значение ~length (Just [1..10])~ и почему?
*** TODO Напишите ~typeclass~ ~Traversable~
*** DONE Напишите реализацию ~Traversable~ для списка
*** DONE Напишите реализацию ~Traversable~ для ~Maybe~ 
*** DONE Напишите реализацию ~Traversable~ для ~Either~
*** TODO Напишите ~typeclass~ ~Foldable~
*** DONE Напишите реализацию ~Foldable~ для списка 
*** DONE Напишите реализацию ~Foldable~ для ~Maybe~
*** DONE Напишите реализацию ~Foldable~ для ~Either~
*** DONE Напишите, что делают эти расширения языка: ~TypeSynonyms, MultiParamTypeClasses, ViewPatterns, RecordsWildCards~
*** DONE Реализуйте ~traverse~ через ~sequence~.
*** DONE Реализуйте ~sequence~ через ~traverse~.
*** DONE Укажите *minimal complete definition* для type class'а ~Foldable~
*** DONE Укажите *minimal complete definition* для type class'а ~Traversable~
*** DONE Напишите реализацию ~Monoid~ для ~Maybe~
*** DONE Напишите реализацию ~Monoid~ для ~(->)~
*** DONE Напишите реализацию ~Monoid~ для ~(a -> a)~. Используя это знание, выразите ~foldr~ через ~foldMap~
** [10/10]Question 5: Functors
*** DONE Напишите законы *функтора*
*** DONE Напишите ~type class Functor~ и его реализацию для ~((->) r)~
*** DONE Напишите ~type class Functor~ и его реализацию для ~Maybe~
*** DONE Напишите ~type class Functor~ и его реализацию для ~Either~
*** DONE Напишитe ~type class Functor~ и его реализацию для ~[]~
*** DONE Реализуйте функцию ~(<<$>>) :: (Functor f, Functor g) => (a -> b) -> f (g a) -> f (g b)~ 
*** DONE Напишите класс типов ~Bifunctor~ и реализуйте его для пары
*** DONE Напишите класс типов ~Bifunctor~ и реализуйте его для ~Either~
*** DONE Реализуйте ~fmap~ через ~bind~
*** DONE Реализуйте ~bind~ через ~join~ и ~fmap~
** [9/11]Question 6: Applicatives
*** DONE Напишите законы *аппликатива*
*** DONE Напишите ~type class ~Applicative~ и его реализацию для ~((->) r)~
*** DONE Напишите ~type class ~Applicative~ и его реализацию для ~Maybe~
*** DONE Напишите ~type class ~Applicative~ и его реализацию для ~Either~
*** DONE Напишите ~type class ~Applicative~ и его реализацию для ~[]~
*** DONE Напишите ~type class ~Applicative~ и его реализацию для ~ZipList~
*** DONE Реализуйте функцию ~liftA3~
*** DONE Реализуйте функцию ~liftAA2 :: (Applicative f, Applicative g) => (a -> b -> c) -> f (g a) -> f (g b) -> f (g c)~
*** TODO Реализуйте функцию ~(<<*>>) :: (Applicative f, Applicative g) => f (g (a -> b)) -> f (g a) -> f (g b)~
*** TODO Реализуйте функцию ~eitherA :: (Alternative f) => f a -> f b -> f (Either a b)~
*** DONE Есть функция ~g :: a -> b~ и объект ~x :: Applicative f => f a~. Напишите два разных способа получить объект ~y :: Applicative f => f b~ из ~x~ с использованием ~g~.
** [18/19]Question 7: Monads
*** DONE Что такое монада?
*** DONE Напишите не меньше пяти типов данных, являющихся монадой
*** DONE Напишите не менее семи функций, полезных при работе с монадами
*** DONE Напишите тип функции ~join~ и приведите несколько примеров использования
*** DONE Реализуйте ~join~ через ~bind~.
*** DONE Напишите реализацию ~Monad~ для списка
*** DONE Напишите реализацию ~Monad~ для ~Maybe~
*** DONE Напишите реализацию ~Monad~ для ~Either~
*** DONE Реализуйте ~Monad~ для ~((->) r)~
*** DONE Напишите определение типа данных ~Writer~ и его ~instance Monad~
*** DONE Напишите определение типа данных ~Reader~ и его ~instance Monad~
*** DONE Напишите определение типа данных ~State~ и его ~instance Monad~
*** DONE Напишите определение типа данных ~Cont~ и его ~instance Monad~
*** DONE Напишите тип ~(>=>)~ и смысл этого оператора.
*** TODO Покажите, синтаксическим сахаром для чего является ~do~-нотация (включая ~let~).
*** DONE Что такое ~IO~? Как теоретически это реализовано? 
*** DONE Отличие ~unsafePerformIO~ от ~unsafeInterleaveIO~?
** [7/7]Question 8: Trans
*** DONE Напишите класс типов ~MonadTrans~ и реализуйте его для ~StateT~
*** DONE Напишите класс типов ~MonadTrans~ и реализуйте его для ~WriterT~
*** DONE Напишите класс типов ~MonadTrans~ и реализуйте его для ~MaybeT~
*** DONE Напишите класс типов ~MonadTrans~ и реализуйте его для ~ReaderT~
*** DONE Напишите тип ~StateT~ и то, как определен ~State~ через ~StateT~
*** DONE Напишите тип ~MaybeT~ и реализуйте его инстанс ~Monad~
*** DONE Нарисуйте табличку отличий обычных типов и их трансформеров для известных вам трансформеров
** [9/10]Question 9: Strict Lazy
*** DONE Что такое *irrefutable patterns* и зачем они нужны?
*** TODO Что такое *Stream Fusion* и зачем он нужен?
*** DONE Напишите, что значит тип ~ST~ и напишите основные функции по работе с ним
*** DONE Что такое ~BangPatterns~? Когда их нужно использовать? 
*** DONE Укажите, что делает ~deepseq~ и как.
*** DONE В чем разница между ~seq~ и ~deepseq~?
*** DONE В чем разница между ~seq~ и ~BangPatterns~?
*** DONE Что такое ~STRef~ и в чем отличие от ~IORef~?
*** DONE Что такое *Deforestation*?
*** DONE Чем плохо использовать ~IORef~ и ~IOArray~? Зачем нужны ~STRef~ и ~STArray~?
** [4/4]Question 10: TemplateHaskell
*** DONE Как можно посмотреть *AST-дерево* для выражения в Haskell?
*** DONE Напишите не меньше трех применений *TemplateHaskell*
*** DONE Что такое ~Q~ в типах функций Template Haskell?
*** DONE В чем разница между ~[| |]~ и ~$()~?
** [8/12]Question 11: Lenses
*** DONE Зачем нужны линзы
*** DONE Что такое изоморфизм (~Iso~)?
*** DONE Чем линзы отличаются от призм?
*** DONE Напишите тип ~Iso~
*** DONE Напишите тип функции ~from~ для ~Iso~
*** DONE Напишите тип функции ~iso~
*** TODO Напишите реализацию ~over~
*** TODO Реализуйте ~set~ через ~over~
*** TODO Реализуйте ~over~ через ~view~ и ~set~. 
*** TODO Напишите функцию ~lens~, которая принимает геттер и сеттер и возвращает линзу
*** DONE Укажите операторные обозначений функций ~view~, ~set~, ~over~. Есть ли отличие в типах функций и их операторных выражений?
*** DONE Реализация view
** [5/6]Question 13: forall
*** DONE Напишите, как иметь список объектов разных функторов, внутри каждого из которых значения одинакового типа, чтобы иметь возможность применить функции из этого значения в другое?
*** TODO Зачем нужно расширение ~ExistentialQuantification~?
*** DONE Зачем нужно расширение языка ~-XExplicitForall~?
*** DONE В чем разница между ~-XRank2Types~ и ~-XRankNTypes~? Зачем нужны оба?
*** DONE Зачем нужно расширение языка ~-XScopedTypeVariables~ и как оно взаимодействует с ~forall~?
*** DONE Написать ~fmap~ с ~forall~
** [12/13]Question 15: Comonads
*** DONE Напишите пример использования *комонад*
*** DONE Напишите, какие комонады двойственны монадам ~Reader, Writer, State~
*** DONE Напишите, какие комонады двойственны монадам ~Traced, Store, Env~
*** DONE Напишите комонаду ~Stream~ и инстанс ~Comonad~ для нее.
*** DONE Напишите комонаду ~Env~ и инстанс ~Comonad~ для нее.
*** DONE Напишите комонаду ~Store~ и инстанс ~Comonad~ для нее.
*** DONE Напишите комонаду ~Traced~ и инстанс ~Comonad~ для нее.
*** DONE Реализуйте ~instance Comonad~ для обычного ~Zipper~
*** TODO ~IO~ использует абстракцию монад, какой аналог есть в мире комонад?
*** DONE Напишите класс ~ComonadTrans~
*** DONE Как можно было бы сделать ~codo~ нотацию для комонад? И что бы происходило в этом синтаксическом сахаре?
*** DONE ~extend~ для ~comonad~
*** DONE ~Zipper~
